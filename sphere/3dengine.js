// 簡易3dエンジン
//
// このソースコードは
// 多分MITライセンスです
// Copyright (c) 2011 totetero

// ----------------------------------------------------------------
// ----------------------------------------------------------------
// ----------------------------------------------------------------
// 基本エンジン部分

var engineStruct = new Object();
engineStruct.imageData = null;

// エンジン初期化
function e3d_init(canvas){
	var context = canvas.getContext("2d");
	engineStruct.imageData = context.createImageData(canvas.width, canvas.height);
	engineStruct.imageData.zbuf = new Array();
	engineStruct.imageData.context = context;
}

// 画像全体のクリア
function e3d_clear(){
	var imgdat = engineStruct.imageData;
	for(var i = 0; i < imgdat.height; i++){
		for(var j = 0; j < imgdat.width; j++){
			var index = i * imgdat.width + j;
			imgdat.data[index * 4 + 0] = 0;
			imgdat.data[index * 4 + 1] = 0;
			imgdat.data[index * 4 + 2] = 0;
			imgdat.data[index * 4 + 3] = 0;
			imgdat.zbuf[index] = 0;
		}
	}
}

// 画像全体の描画
function e3d_draw(){
	var imgdat = engineStruct.imageData;
	imgdat.context.putImageData(imgdat, 0, 0);
}

// ドット描画
function e3d_draw_dot2d(x, y, z, r, g, b){
	var imgdat = engineStruct.imageData;
	if(x < 0 || imgdat.width <= x){return;}
	if(y < 0 || imgdat.height <= y){return;}
	var index = Math.floor(y) * imgdat.width + Math.floor(x);
	//if(z < imgdat.zbuf[index]){return;}
	imgdat.data[index * 4 + 0] = r;
	imgdat.data[index * 4 + 1] = g;
	imgdat.data[index * 4 + 2] = b;
	imgdat.data[index * 4 + 3] = 255;
	imgdat.zbuf[index] = z;
}

// ----------------------------------------------------------------
// ----------------------------------------------------------------
// ----------------------------------------------------------------
// 3dエンジン部分

// ドット描画
function e3d_draw_dot3d(mat, x, y, z, r, g, b){
	var vec = new Object();
	transCoord(vec, mat, x, y, z);
	vec.x /= vec.w;
	vec.y /= vec.w;
	vec.z /= vec.w;
	//console.log(vec.x + " " + vec.y + " " + vec.z);
	e3d_draw_dot2d(vec.x, vec.y, vec.z, r, g, b)
}

// ----------------------------------------------------------------
// ----------------------------------------------------------------
// ----------------------------------------------------------------
// 簡易行列演算ライブラリ
// 
// openGLと同じ右手座標系のつもり
//[ x ][ _11, _12, _13, _14 ]
//[ y ][ _21, _22, _23, _24 ]
//[ z ][ _31, _32, _33, _34 ]
//[ w ][ _41, _42, _43, _44 ]

// ベクトルと行列を掛け合わせてアファイン変換を行う vec = v0 * m
function transVec3(vec, m, v0){
	vec.x = v0.x * m._11 + v0.y * m._21 + v0.z * m._31 + m._41;
	vec.y = v0.x * m._12 + v0.y * m._22 + v0.z * m._32 + m._42;
	vec.z = v0.x * m._13 + v0.y * m._23 + v0.z * m._33 + m._43;
	vec.w = v0.x * m._14 + v0.y * m._24 + v0.z * m._34 + m._44;
}

// 座標と行列を掛け合わせてアファイン変換を行う vec = (x, y, z) * m
function transCoord(vec, m, x, y, z){
	vec.x = x * m._11 + y * m._21 + z * m._31 + m._41;
	vec.y = x * m._12 + y * m._22 + z * m._32 + m._42;
	vec.z = x * m._13 + y * m._23 + z * m._33 + m._43;
	vec.w = x * m._14 + y * m._24 + z * m._34 + m._44;
}

// ----------------------------------------------------------------
// 行列の掛け合わせ

// 行列の掛け合わせ mat = m0 * m1
function mulMat44(mat, m0, m1){
	mat._11 = m0._11 * m1._11 + m0._12 * m1._21 + m0._13 * m1._31 + m0._14 * m1._41;
	mat._12 = m0._11 * m1._12 + m0._12 * m1._22 + m0._13 * m1._32 + m0._14 * m1._42;
	mat._13 = m0._11 * m1._13 + m0._12 * m1._23 + m0._13 * m1._33 + m0._14 * m1._43;
	mat._14 = m0._11 * m1._14 + m0._12 * m1._24 + m0._13 * m1._34 + m0._14 * m1._44;
	mat._21 = m0._21 * m1._11 + m0._22 * m1._21 + m0._23 * m1._31 + m0._24 * m1._41;
	mat._22 = m0._21 * m1._12 + m0._22 * m1._22 + m0._23 * m1._32 + m0._24 * m1._42;
	mat._23 = m0._21 * m1._13 + m0._22 * m1._23 + m0._23 * m1._33 + m0._24 * m1._43;
	mat._24 = m0._21 * m1._14 + m0._22 * m1._24 + m0._23 * m1._34 + m0._24 * m1._44;
	mat._31 = m0._31 * m1._11 + m0._32 * m1._21 + m0._33 * m1._31 + m0._34 * m1._41;
	mat._32 = m0._31 * m1._12 + m0._32 * m1._22 + m0._33 * m1._32 + m0._34 * m1._42;
	mat._33 = m0._31 * m1._13 + m0._32 * m1._23 + m0._33 * m1._33 + m0._34 * m1._43;
	mat._34 = m0._31 * m1._14 + m0._32 * m1._24 + m0._33 * m1._34 + m0._34 * m1._44;
	mat._41 = m0._41 * m1._11 + m0._42 * m1._21 + m0._43 * m1._31 + m0._44 * m1._41;
	mat._42 = m0._41 * m1._12 + m0._42 * m1._22 + m0._43 * m1._32 + m0._44 * m1._42;
	mat._43 = m0._41 * m1._13 + m0._42 * m1._23 + m0._43 * m1._33 + m0._44 * m1._43;
	mat._44 = m0._41 * m1._14 + m0._42 * m1._24 + m0._43 * m1._34 + m0._44 * m1._44;
}

// 平行移動行列の掛け合わせ mat = (x, y, z) * m
//[  1,  0,  0,  0 ][ _11, _12, _13, _14 ]
//[  0,  1,  0,  0 ][ _21, _22, _23, _24 ]
//[  0,  0,  1,  0 ][ _31, _32, _33, _34 ]
//[  x,  y,  z,  1 ][ _41, _42, _43, _44 ]
function mulMat44Translate(mat, m, x, y, z){
	mat._11 = m._11;
	mat._12 = m._12;
	mat._13 = m._13;
	mat._14 = m._14;
	mat._21 = m._21;
	mat._22 = m._22;
	mat._23 = m._23;
	mat._24 = m._24;
	mat._31 = m._31;
	mat._32 = m._32;
	mat._33 = m._33;
	mat._34 = m._34;
	mat._41 = m._41 + m._11 * x + m._21 * y + m._31 * z;
	mat._42 = m._42 + m._12 * x + m._22 * y + m._32 * z;
	mat._43 = m._43 + m._13 * x + m._23 * y + m._33 * z;
	mat._44 = m._44 + m._14 * x + m._24 * y + m._34 * z;
}

// 拡大縮小行列の掛け合わせ mat = (x, y, z) * m
//[  x,  0,  0,  0 ][ _11, _12, _13, _14 ]
//[  0,  y,  0,  0 ][ _21, _22, _23, _24 ]
//[  0,  0,  z,  0 ][ _31, _32, _33, _34 ]
//[  0,  0,  0,  1 ][ _41, _42, _43, _44 ]
function mulMat44Scale(mat, m, x, y, z){
	mat._11 = m._11 * x;
	mat._12 = m._12 * x;
	mat._13 = m._13 * x;
	mat._14 = m._14 * x;
	mat._21 = m._21 * y;
	mat._22 = m._22 * y;
	mat._23 = m._23 * y;
	mat._24 = m._24 * y;
	mat._31 = m._31 * z;
	mat._32 = m._32 * z;
	mat._33 = m._33 * z;
	mat._34 = m._34 * z;
	mat._41 = m._41;
	mat._42 = m._42;
	mat._43 = m._43;
	mat._44 = m._44;
}

// x軸中心回転行列の掛け合わせ mat = (r) * m
//[  1,  0,  0,  0 ][ _11, _12, _13, _14 ]
//[  0,  c,  s,  0 ][ _21, _22, _23, _24 ]
//[  0, -s,  c,  0 ][ _31, _32, _33, _34 ]
//[  0,  0,  0,  1 ][ _41, _42, _43, _44 ]
function mulMat44RotX(mat, m, r){
	var mr22 = Math.cos(r)
	var mr23 = Math.sin(r)
	var mr32 = -mr23;
	var mr33 = mr22;
	mat._11 = m._11;
	mat._12 = m._12;
	mat._13 = m._13;
	mat._14 = m._14;
	mat._21 = mr22 * m._21 + mr23 * m._31;
	mat._22 = mr22 * m._22 + mr23 * m._32;
	mat._23 = mr22 * m._23 + mr23 * m._33;
	mat._24 = mr22 * m._24 + mr23 * m._34;
	mat._31 = mr32 * m._21 + mr33 * m._31;
	mat._32 = mr32 * m._22 + mr33 * m._32;
	mat._33 = mr32 * m._23 + mr33 * m._33;
	mat._34 = mr32 * m._24 + mr33 * m._34;
	mat._41 = m._41;
	mat._42 = m._42;
	mat._43 = m._43;
	mat._44 = m._44;
}

// y軸中心回転行列の掛け合わせ mat = (r) * m
//[  c,  0, -s,  0 ][ _11, _12, _13, _14 ]
//[  0,  1,  0,  0 ][ _21, _22, _23, _24 ]
//[  s,  0,  c,  0 ][ _31, _32, _33, _34 ]
//[  0,  0,  0,  1 ][ _41, _42, _43, _44 ]
function mulMat44RotY(mat, m, r){
	var mr33 = Math.cos(r)
	var mr31 = Math.sin(r)
	var mr13 = -mr31;
	var mr11 = mr33;
	mat._11 = mr11 * m._11 + mr13 * m._31;
	mat._12 = mr11 * m._12 + mr13 * m._32;
	mat._13 = mr11 * m._13 + mr13 * m._33;
	mat._14 = mr11 * m._14 + mr13 * m._34;
	mat._21 = m._21;
	mat._22 = m._22;
	mat._23 = m._23;
	mat._24 = m._24;
	mat._31 = mr31 * m._11 + mr33 * m._31;
	mat._32 = mr31 * m._12 + mr33 * m._32;
	mat._33 = mr31 * m._13 + mr33 * m._33;
	mat._34 = mr31 * m._14 + mr33 * m._34;
	mat._41 = m._41;
	mat._42 = m._42;
	mat._43 = m._43;
	mat._44 = m._44;
	

}

// z軸中心回転行列の掛け合わせ mat = (r) * m
//[  c,  s,  0,  0 ][ _11, _12, _13, _14 ]
//[ -s,  c,  0,  0 ][ _21, _22, _23, _24 ]
//[  0,  0,  1,  0 ][ _31, _32, _33, _34 ]
//[  0,  0,  0,  1 ][ _41, _42, _43, _44 ]
function mulMat44RotZ(mat, m, r){
	var mr11 = Math.cos(r)
	var mr12 = Math.sin(r)
	var mr21 = -mr12;
	var mr22 = mr11;
	mat._11 = mr11 * m._11 + mr12 * m._21;
	mat._12 = mr11 * m._12 + mr12 * m._22;
	mat._13 = mr11 * m._13 + mr12 * m._23;
	mat._14 = mr11 * m._14 + mr12 * m._24;
	mat._21 = mr21 * m._11 + mr22 * m._21;
	mat._22 = mr21 * m._12 + mr22 * m._22;
	mat._23 = mr21 * m._13 + mr22 * m._23;
	mat._24 = mr21 * m._14 + mr22 * m._24;
	mat._31 = m._31;
	mat._32 = m._32;
	mat._33 = m._33;
	mat._34 = m._34;
	mat._41 = m._41;
	mat._42 = m._42;
	mat._43 = m._43;
	mat._44 = m._44;
}

// ----------------------------------------------------------------
// 行列の作成

// 単位行列作成
function mat44(mat){
	mat._12 = mat._13 = mat._14 = 0;
	mat._21 = mat._23 = mat._24 = 0;
	mat._31 = mat._32 = mat._34 = 0;
	mat._41 = mat._42 = mat._43 = 0;
	mat._11 = mat._22 = mat._33 = mat._44 = 1;
}

// 射影行列作成
function mat44Frustum(mat, w, h, z_near, z_far){
	mat._12 = mat._13 = mat._14 = 0;
	mat._21 = mat._23 = mat._24 = 0;
	mat._31 = mat._32 = 0;
	mat._41 = mat._42 = 0;
	mat._11 = 2 * z_near / w;
	mat._22 = 2 * z_near / h;
	mat._33 = -(z_far + z_near) / (z_far - z_near);
	mat._34 = -1;
	mat._43 = -2 * z_near * z_far / (z_far - z_near);
	mat._44 = 0;
}

// 描画領域行列
function mat44Viewport(mat, x, y, w, h){
	mat._12 = mat._13 = mat._14 = 0;
	mat._21 = mat._23 = mat._24 = 0;
	mat._31 = mat._32 = mat._34 = 0;
	mat._43 = 0;
	mat._33 = mat._44 = 1;
	mat._11 =  w / 2;
	mat._22 = -h / 2;
	mat._41 = w / 2 + x;
	mat._42 = h / 2 + y;
}

// 4*4行列の逆行列作成
function mat44Inverse(mat, m){
	mat._11 =  m._22 * (m._33 * m._44 - m._34 * m._43) + m._23 * (m._34 * m._42 - m._32 * m._44) + m._24 * (m._32 * m._43 - m._33 * m._42);
	mat._12 = -m._32 * (m._43 * m._14 - m._44 * m._13) - m._33 * (m._44 * m._12 - m._42 * m._14) - m._34 * (m._42 * m._13 - m._43 * m._12);
	mat._13 =  m._42 * (m._13 * m._24 - m._14 * m._23) + m._43 * (m._14 * m._22 - m._12 * m._24) + m._44 * (m._12 * m._23 - m._13 * m._22);
	mat._14 = -m._12 * (m._23 * m._34 - m._24 * m._33) - m._13 * (m._24 * m._32 - m._22 * m._34) - m._14 * (m._22 * m._33 - m._23 * m._32);
	mat._21 = -m._23 * (m._34 * m._41 - m._31 * m._44) - m._24 * (m._31 * m._43 - m._33 * m._41) - m._21 * (m._33 * m._44 - m._34 * m._43);
	mat._22 =  m._33 * (m._44 * m._11 - m._41 * m._14) + m._34 * (m._41 * m._13 - m._43 * m._11) + m._31 * (m._43 * m._14 - m._44 * m._13);
	mat._23 = -m._43 * (m._14 * m._21 - m._11 * m._24) - m._44 * (m._11 * m._23 - m._13 * m._21) - m._41 * (m._13 * m._24 - m._14 * m._23);
	mat._24 =  m._13 * (m._24 * m._31 - m._21 * m._34) + m._14 * (m._21 * m._33 - m._23 * m._31) + m._11 * (m._23 * m._34 - m._24 * m._33);
	mat._31 =  m._24 * (m._31 * m._42 - m._32 * m._41) + m._21 * (m._32 * m._44 - m._34 * m._42) + m._22 * (m._34 * m._41 - m._31 * m._44);
	mat._32 = -m._34 * (m._41 * m._12 - m._42 * m._11) - m._31 * (m._42 * m._14 - m._44 * m._12) - m._32 * (m._44 * m._11 - m._41 * m._14);
	mat._33 =  m._44 * (m._11 * m._22 - m._12 * m._21) + m._41 * (m._12 * m._24 - m._14 * m._22) + m._42 * (m._14 * m._21 - m._11 * m._24);
	mat._34 = -m._14 * (m._21 * m._32 - m._22 * m._31) - m._11 * (m._22 * m._34 - m._24 * m._32) - m._12 * (m._24 * m._31 - m._21 * m._34);
	mat._41 = -m._21 * (m._32 * m._43 - m._33 * m._42) - m._22 * (m._33 * m._41 - m._31 * m._43) - m._23 * (m._31 * m._42 - m._32 * m._41);
	mat._42 =  m._31 * (m._42 * m._13 - m._43 * m._12) + m._32 * (m._43 * m._11 - m._41 * m._13) + m._33 * (m._41 * m._12 - m._42 * m._11);
	mat._43 = -m._41 * (m._12 * m._23 - m._13 * m._22) - m._42 * (m._13 * m._21 - m._11 * m._23) - m._43 * (m._11 * m._22 - m._12 * m._21);
	mat._44 =  m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31);
	var det =  m._11 * mat._11 + m._21 * mat._12 + m._31 * mat._13 + m._41 * mat._14;
	if(det == 0){return -1;}
	var idet = 1 / det;
	mat._11 *= idet; mat._12 *= idet; mat._13 *= idet; mat._14 *= idet;
	mat._21 *= idet; mat._22 *= idet; mat._23 *= idet; mat._24 *= idet;
	mat._31 *= idet; mat._32 *= idet; mat._33 *= idet; mat._34 *= idet;
	mat._41 *= idet; mat._42 *= idet; mat._43 *= idet; mat._44 *= idet;
	return 0;
}

// ----------------------------------------------------------------
// ----------------------------------------------------------------
// ----------------------------------------------------------------
